#! /usr/bin/env bash

# VERSION=<VERSION>

case "${BASH_VERSINFO[0]}.${BASH_VERSINFO[1]}" in
    [1-3].* | 4.[1-3] )
        >&2 echo "Least required version of bash is 4.4."
        exit 1
    ;;
esac

LOGGER_GLOBAL_LABEL="__GLOBAL__"

declare -A __LOGGER_LEVELS_MAP=( [A]=0 [T]=1 [D]=2 [I]=3 [N]=4 [W]=5 [E]=6 [C]=7 )
declare -A __LOGGER_ID_TO_FILEPATH_MAP
declare -A __LOGGER_ID_TO_LEVEL_MAP=( [${LOGGER_GLOBAL_LABEL}]="A" )

function logger::__print_call_stack() {
    local stack_size="${#FUNCNAME[@]}"

    >&2 echo
    >&2 echo "Stack trace:"

    local i=0

    for (( i=$(( stack_size - 1 )); i >= 2; i-- )); do
        local function_name="${FUNCNAME[$(( i - 1 ))]:-"MAIN"}"
        local source_line_number="${BASH_LINENO[$(( i - 1 ))]}"
        local function_source="${BASH_SOURCE[$i]:-"non_file_source"}"

        # TODO: align to right
        >&2 echo -n "   "
        >&2 echo "$(( stack_size - i )): ${function_source}:${source_line_number} > ${function_name}()"
    done
}

function logger::__message() {
    local label="${1}"
    local level="${2}"
    local message="${3}"

    local datetime="\D{%d.%m.%Y %H:%M:%S}"
    local line="[${datetime@P}] ${level}: ${message}"

    if [[ -z "${__LOGGER_ID_TO_FILEPATH_MAP[${label}]+_}" ]]; then
        >&2 echo "${line}"
    else
        echo "${line}" >> "${__LOGGER_ID_TO_FILEPATH_MAP[${label}]}" || {
            # if saving log message to file fails, print it to STDERR
            >&2 echo "[${datetime@P}] C: Cannot write to log file '${__LOGGER_ID_TO_FILEPATH_MAP[${label}]}' anymore."
            >&2 echo "${line}"
        }
    fi
}

function logger::__terminate() {
    local label="${1}"
    local message="${2}"

    # print call stack together with the message
    if ! [[ -z "${__LOGGER_ID_TO_FILEPATH_MAP[${label}]+_}" ]]; then
        message+=$'\n'"$(logger::__print_call_stack 2>&1)"
        logger::__message "${label}" "C" "${message}"
    else
        logger::__message "${label}" "C" "${message}"
        logger::__print_call_stack
    fi

    exit 1
}

function logger::__validate_level_label() {
    local label="${1}"

    if [[ -z "${__LOGGER_ID_TO_LEVEL_MAP[${label}]+_}" ]]; then
        logger::__terminate "${LOGGER_GLOBAL_LABEL}" "Level for label '${label}' has not been registered."
    fi
}

function logger::__validate_filepath_label() {
    local label="${1}"

    if [[ -z "${__LOGGER_ID_TO_FILEPATH_MAP[${label}]+_}" ]]; then
        logger::__terminate "${LOGGER_GLOBAL_LABEL}" "Filepath for label '${label}' has not been registered."
    fi
}

function logger::__validate_level() {
    local label="${LOGGER_GLOBAL_LABEL}"
    local level="${1}"

    if [[ -z "${__LOGGER_LEVELS_MAP[${level}]+_}" ]]; then
        logger::__terminate "${label}" "Level '${level}' is not supported."
    fi
}

function logger::__prepare_log() {
    local label="${LOGGER_GLOBAL_LABEL}"
    local log_filepath="${1}"

    if [[ -d "${log_filepath}" ]]; then
        logger::__terminate "${label}" "'${log_filepath}' is a directory."
    elif [[ -e "${log_filepath}" ]] && ! [[ -w "${log_filepath}" ]]; then
        logger::__terminate "${label}" "Log file '${log_filepath}' is not writable."
    fi

    if [[ -w "${log_filepath}" ]]; then
        return 0
    fi

    local log_dirpath="$(dirname "${log_filepath}")" || logger::__terminate "${label}" "Cannot determine log directory ditpath from '${log_dirpath}'."

    if [[ ! -d "${log_dirpath}" ]]; then
        mkdir -p "${log_dirpath}" || logger::__terminate "${label}" "Cannot create log directory '${log_dirpath}'."
    fi

    touch "${log_filepath}" || logger::__terminate "${label}" "Cannot create log file '${log_filepath}'."
}

function logger::level_is_lower() {
    local level1="${1}"
    local level2="${2}"

    logger::__validate_level "${level1}"
    logger::__validate_level "${level2}"

    if [[ ${__LOGGER_LEVELS_MAP[${level1}]} -lt ${__LOGGER_LEVELS_MAP[${level2}]} ]]; then
        return 0
    fi

    return 1
}

function logger::level_is_equal() {
    local level1="${1}"
    local level2="${2}"

    logger::__validate_level "${level1}"
    logger::__validate_level "${level2}"

    if [[ ${__LOGGER_LEVELS_MAP[${level1}]} -eq ${__LOGGER_LEVELS_MAP[${level2}]} ]]; then
        return 0
    fi

    return 1
}

function logger::level_is_greater() {
    local level1="${1}"
    local level2="${2}"

    logger::__validate_level "${level1}"
    logger::__validate_level "${level2}"

    if [[ ${__LOGGER_LEVELS_MAP[${level1}]} -gt ${__LOGGER_LEVELS_MAP[${level2}]} ]]; then
        return 0
    fi

    return 1
}

function logger::get_level() {
    local label="${LOGGER_GLOBAL_LABEL}"

    if [[ ${#} -eq 1 ]]; then
        label="${1}"
    fi

    logger::__validate_level_label "${label}"

    printf "%s" "${__LOGGER_ID_TO_LEVEL_MAP[${label}]}"
}

function logger::get_filepath() {
    local label="${LOGGER_GLOBAL_LABEL}"

    if [[ ${#} -eq 1 ]]; then
        label="${1}"
    fi

    logger::__validate_filepath_label "${label}"

    printf "%s" "${__LOGGER_ID_TO_FILEPATH_MAP[${label}]}"
}

function logger::init() {
    local label="${LOGGER_GLOBAL_LABEL}"
    local level=""
    local log_filepath=""

    case ${#} in
        1 )
            level="${1}"
        ;;

        2 )
            level="${1}"
            log_filepath="${2}"
        ;;

        3 )
            label="${1}"
            level="${2}"
            log_filepath="${3}"
        ;;

        * )
            logger::__terminate "${label}" "Pass either 1, 2 or 3 parameters to ${FUNCNAME}()."
    esac

    logger::__validate_level "${level}"

    __LOGGER_ID_TO_LEVEL_MAP[${label}]="${level}"

    if [[ ${#} -eq 1 ]]; then
        unset __LOGGER_ID_TO_FILEPATH_MAP[${label}]
    else
        logger::__prepare_log "${log_filepath}"

        __LOGGER_ID_TO_FILEPATH_MAP[${label}]="${log_filepath}"
    fi
}

function logger::log() {
    local label="${LOGGER_GLOBAL_LABEL}"
    local level=""
    local message=""

    case ${#} in
        2 )
            level="${1}"
            message="${2}"
        ;;

        3 )
            label="${1}"
            level="${2}"
            message="${3}"
        ;;

        * )
            logger::__terminate "${label}" "Pass either 2 or 3 parameters to ${FUNCNAME}()."
    esac

    logger::__validate_level_label "${label}"
    logger::__validate_level "${level}"

    # level A is valid only in logger::init()
    if [[ "${level}" == "A" ]]; then
        logger::__terminate "${label}" "Message's level cannot be set to A."
    fi

    if logger::level_is_lower "${level}" "${__LOGGER_ID_TO_LEVEL_MAP[${label}]}"; then
        return 0
    fi

    logger::__message "${label}" "${level}" "${message}"
}
